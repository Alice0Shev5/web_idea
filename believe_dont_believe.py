import logging
import sqlite3
from random import randint

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import CommandHandler, Updater, ConversationHandler, CallbackQueryHandler, MessageHandler, Filters

from facts import *

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
logger = logging.getLogger(__name__)
TOKEN = '5346789615:AAGsYMrZrCudqdfLQSkMZXtbrEHItVJEg7M'

keyboard = [
    [InlineKeyboardButton("–í–µ—Ä—é", callback_data='1'),
     InlineKeyboardButton("–ù–µ –≤–µ—Ä—é", callback_data='0')],
]
reply_markup = InlineKeyboardMarkup(keyboard)

key_for_new_fact = [
    [InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data='True'),
     InlineKeyboardButton("–õ–æ–∂—å", callback_data='False')],
]
new_fact_markup = InlineKeyboardMarkup(key_for_new_fact)

used_answers = []
answer = ()
for i in range(1, 35):
    used_answers.append(i)

reply_keyboard = [['–ü—Ä–∞–≤–¥–∞'],
                  ['–õ–æ–∂—å']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)


def poisk():
    global answer, used_answers
    con = sqlite3.connect("project")
    cur = con.cursor()
    number = randint(1, 34)
    while number not in used_answers:
        number = randint(1, 34)
    result = cur.execute("""SELECT * FROM FACT
              WHERE id= ?""", (number,)).fetchall()

    answer = result[0]
    del used_answers[used_answers.index(answer[0])]
    con.close()
    print(used_answers)
    return answer


def start(update, context):
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç üëã. –Ø –ø—Ä–µ–ª–∞–≥–∞—é —Ç–µ–±–µ —Å—ã–≥—Ä–∞—Ç—å —Å–æ –º–Ω–æ–π –≤ –∏–≥—Ä—É "–í–µ—Ä—é –Ω–µ –≤–µ—Ä—é!" üòÑ\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π üëáüëáüëá\n'
        '/play ‚Äî –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—åüß©\n'
        '/add ‚Äî –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ üß®'
    )


def play(update, context):  # –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
    fact = poisk()
    print(fact)
    update.message.reply_text("–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—é –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /fact\n"
                              "–ù–∞—á–∞–ª–∏üß≠", reply_markup=ReplyKeyboardRemove())
    update.message.reply_text(fact[1], reply_markup=reply_markup)
    return next


def fact(update, context):
    fact = poisk()
    update.message.reply_text(fact[1], reply_markup=reply_markup)


def check_answer(update, context):  # —Ñ—É–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ "–≤–µ—Ä—é –Ω–µ –≤–µ—Ä—é"
    query = update.callback_query
    variant = query.data
    query.answer()

    ID, key, pic = answer[0], answer[2], answer[3]
    if pic == 1:
        photo = f"images/{ID}.jpg"
        chat_id = update.effective_chat.id
        context.bot.send_photo(chat_id=chat_id, photo=open(photo, 'rb'))

    if str(variant) == str(key):
        # —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫, –∫—Ç–æ—Ä—ã–π —Ä–∞–Ω–¥–æ–º–Ω–æ –±—É–¥–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
        query.edit_message_text(text=f"{true_answer[randint(0, 3)]}\n"
                                     f"{facts[ID]}")
    else:
        query.edit_message_text(text=f"{false_answer[randint(0, 2)]}\n"
                                     f"{facts[ID]}")


def add(name1, key1):  # –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç
    con = sqlite3.connect("new_fact")
    cur = con.cursor()

    cur.execute(f"INSERT INTO fact(name, key) VALUES(?, ?)", (name1, key1)).fetchall()
    con.commit()


def add_fact(update, context):
    update.message.reply_text("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç! ‚ùì\n"
                              "–°–µ–π—á–∞—Å —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∏–≥—Ä—É –≤ —Ä–∞–∑—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ üåà\n"
                              "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–≤–µ–¥–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å üåù\n"
                              "–ï—Å–ª–∏ —Ç—ã —É–∂–µ –ø–µ—Ä–µ–¥—É–º–∞–ª, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /stop")
    return "fact"


def new_fact(update, context):
    context.user_data['fact'] = update.message.text
    update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω–∞–¥–æ –∑–Ω–∞—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–≤–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ–º"
                              " –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–∂—å—é", reply_markup=markup)
    return "key"


def new_key(update, context):
    key = update.message.text
    context.user_data['key'] = key
    if str(key) == "–ü—Ä–∞–≤–¥–∞":
        context.user_data['key'] = 1

    elif str(key) == "–õ–æ–∂—å":
        context.user_data['key'] = 0
    add(context.user_data['fact'], context.user_data['key'])

    update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!", reply_markup=ReplyKeyboardRemove())
    update.message.reply_text("–¢–≤–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
    return ConversationHandler.END


def stop(update, context):
    update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))

    dp.add_handler(CommandHandler("play", play))
    dp.add_handler(CallbackQueryHandler(check_answer))
    dp.add_handler(CommandHandler("fact", fact))

    add_handler = ConversationHandler(
        entry_points=[CommandHandler('add', add_fact)],
        states={
            "fact": [MessageHandler(Filters.text & ~Filters.command, new_fact)],
            "key": [MessageHandler(Filters.text & ~Filters.command, new_key)]
        },

        fallbacks=[CommandHandler('stop', stop)]
    )
    dp.add_handler(add_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
